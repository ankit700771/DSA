/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int findValue(int target , vector<int>&inorder){
        for(int i = 0; i<inorder.size(); i++){
            if(target == inorder[i]){
                return i;
            }
        }
        return -1;
    }

     TreeNode *solve(vector<int>&inorder , vector<int>&postorder , int start , int end , int &idx){
        if(idx <0 || start > end){
            return NULL;
        }

        int currRootValue = postorder[idx];
        // this function used to find the postorder value inside the inorder
        int i = findValue(currRootValue , inorder);
        idx--;
        TreeNode *root = new TreeNode(currRootValue);
        // post order LRN that's why first right then left
        root->right = solve(inorder , postorder ,i+1 ,end , idx);
        root->left = solve(inorder , postorder , start , i-1 , idx);
        

        return root;

    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        int start = 0;
        int end = n-1;
        int idx = n-1;

        return solve(inorder , postorder , start ,end , idx);
    }
};
