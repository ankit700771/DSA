class Solution {
public:

    // find left Maximum element before i index
    vector<int> findLeftMax(vector<int>&height , int n){
        vector<int>leftMax(n);

        leftMax[0] = height[0];

        for(int i = 1; i<n; i++){
            leftMax[i] = max(leftMax[i - 1] , height[i]);
        }
        return leftMax;
    }

    // find right maximum element after ith index
    vector<int> findRightMax(vector<int>&height , int n){
        vector<int>rightMax(n);

        rightMax[n-1] = height[n-1];

        for(int i = n-2; i>=0; i--){
            rightMax[i] = max(rightMax[i + 1] , height[i]);
        }
        return rightMax;
    }

    int trap(vector<int>& height) {
        int n = height.size();

        vector<int>leftMax = findLeftMax(height , n);
        vector<int>rightMax = findRightMax(height , n);

        int ans = 0;

        for(int i = 0; i<n; i++){
            // maximum water are hold 
            int h = min(leftMax[i] , rightMax[i]) - height[i];

            ans+= h;
        }
        return ans;
    }
};

// without extra space

class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        int maxHeight = height[0];
        int idx = 0;
        int maxWater = 0;
        for(int i = 1; i<n; i++){
            if(maxHeight < height[i]){
                maxHeight = height[i];
                idx = i;
            }
        }

        //left part
        int left = 0;
        for(int i = 0; i<idx; i++){
            if(left > height[i]){
                maxWater += left - height[i]; 
            }
            else{
                left = height[i];
            }
        }

        //right part
        int right = 0;
        for(int i = n-1; i>idx; i--){
            if(right > height[i]){
                maxWater += right - height[i];
            }
            else{
                right = height[i];
            }
        }

        return maxWater;

    }
};
