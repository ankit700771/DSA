/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;

        queue<Node *>q;
        q.push(root);

        while(!q.empty()) {
            int size = q.size();
            // initially prev pointer pointing to NULL becouse inside a queue i push element right to left means right most node require to point to the null thats why first assign the prev pointer to null after that we update the prev pointer to the current element and when next element comes in that's point to its right child means prev pointer becouse we update it prev pointer
            Node *prev = NULL;

            for(int i = 0; i<size; i++) {
                Node *temp = q.front();
                q.pop();
                
                temp->next = prev;
                // here we update the prev pointer
                prev = temp;

                if(temp->right) q.push(temp->right);
                if(temp->left) q.push(temp->left);
            }
        }
        return root;
    }
};
