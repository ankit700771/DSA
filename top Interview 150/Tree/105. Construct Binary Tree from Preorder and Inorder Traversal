/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int findInInorder(int key , vector<int>&inorder) {
        int n = inorder.size();
        for(int i = 0; i<n; i++) {
            if(inorder[i] == key) {
                return i;
            }
        }
        return -1;
    }
    // Here i actually forgot to pass idx as a refrence
    TreeNode* solve(vector<int>&preorder , vector<int>&inorder , int &idx , int start , int end) {
        if(start > end) {
            return NULL;
        }

        int i = findInInorder(preorder[idx] , inorder);
        TreeNode *root = new TreeNode(preorder[idx]);
        idx++;
        root->left = solve(preorder , inorder , idx , start , i-1);
        root->right = solve(preorder ,inorder , idx , i+1 , end);

        return root;

    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int end = preorder.size() - 1;
        int idx = 0;
        TreeNode *root = solve(preorder , inorder , idx ,0  , end);
        return root;
    }
};
