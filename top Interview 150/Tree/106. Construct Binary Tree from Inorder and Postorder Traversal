/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int findInInorder(int key , vector<int>&inorder) {
        for(int i = 0; i<inorder.size(); i++) {
            if(inorder[i] == key) {
                return i;
            }
        }
        return -1;
    }

    TreeNode* solve(vector<int>&inorder , vector<int>&postorder , int&idx , int start , int end) {
        if(start > end) {
            return NULL;
        }

        int i = findInInorder(postorder[idx] , inorder);
        TreeNode *root = new TreeNode(postorder[idx]);
        idx--;

        root->right = solve(inorder , postorder , idx , i+1 , end);
        root->left = solve(inorder , postorder , idx , start , i-1);
        return root;
    }


    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int idx = inorder.size() -1;
        int end = inorder.size() - 1;
        return solve(inorder , postorder , idx , 0 , end);
    }
};
