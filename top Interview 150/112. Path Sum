/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    bool solve(TreeNode *root , int target , int &sum){
        if(root == NULL){
            return false;
        }

        sum = sum + root->val;

        if(sum == target && (root->left == NULL && root->right == NULL)){
            return true;
        }

        bool ans1 = solve(root->left , target , sum);
        
        bool ans2 = solve(root->right , target ,sum);
        sum = sum - root->val;

        return ans1 || ans2;
    }

    bool hasPathSum(TreeNode* root, int targetSum) {
        int sum = 0;
        return solve(root , targetSum , sum);
    }

    // bool hasPathSum(TreeNode* root, int targetSum) {
    //     if(root == NULL){
    //         return false;
    //     }

    //     if(root->left == NULL && root->right == NULL){
    //         return targetSum == root->val;
    //     }

    //     bool ans1 = hasPathSum(root->left , targetSum - root->val);
    //     bool ans2 = hasPathSum(root->right , targetSum - root->val);

    //     return ans1 || ans2;
    // }
};
