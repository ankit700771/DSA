//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    
    bool solve(vector<int> adj[] , vector<bool>&visited ,int src) {
        queue<pair<int , int>>q;
        q.push({src , -1});
        visited[src] = true;
        while(!q.empty()) {
            auto temp = q.front();
            q.pop();
            
            int source = temp.first;
            int parent = temp.second;
            
            for(auto v : adj[source]) {
                if(visited[v] == false) {
                    visited[v] = true;
                    q.push({v , source});
                }
                else if(v != parent) {
                    return true;
                }
            }
        }
        return false;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<bool>visited(V , false);
        for(int i = 0; i<V; i++) {
            if(!visited[i] && solve(adj , visited , i)){
               return true;
            }
        }
        return false;
    }
};
