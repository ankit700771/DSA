
class Solution {
public:
    
    bool checkBipartite(vector<int> adj[] , int curr , vector<int>&color , int currColor) {
        // we aasigen current node a current color
        color[curr] = currColor;
        
        for(auto v : adj[curr]) {
            
            if(color[curr] == color[v]) {
                return false;
            }
            // agar adjacent of curr node v is not colored and not visited then we need
            // to color this node using dfs
            if(color[v] == -1){
                int colorOfV = 1 - currColor;
                if(checkBipartite(adj , v , color , colorOfV) == false) {
                    return false;
                }
            }
        }
        
        return true;
    }

	bool isBipartite(int V, vector<int>adj[]){
	    // this color vector work as visited also
	    /*
	        if the color[i] == -1 means till now we can not visited the node i
	    */
	    vector<int>color(V , -1);
	    // red color - 1
	    // green color - 0
	    
	    for(int i = 0; i<V; i++) {
	        if(color[i] == -1 && checkBipartite(adj , i , color , 1) == false)
	                return false;
	    }
	    return true;
	}

};
