class Solution {
public:

    /*
        Just like to find connected commoponents
    */

    void DFS(unordered_map<int , vector<int>>&adj , vector<bool>&visited , int src) {
        visited[src] = true;

        for(auto v : adj[src]) {
            if(!visited[v]) {
                DFS(adj , visited , v);
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<bool>visited(n , false);
        int count = 0;
        // make adj list becouse i am more comfortable to code with adj list
        unordered_map<int , vector<int>>adj;
        for(int i = 0; i<n; i++) {
            for(int j = 0; j<n; j++) {
                if(isConnected[i][j] == 1) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }

        for(int i = 0; i<n; i++) {
            if(!visited[i]){
                //calling DFS
                DFS(adj , visited , i);
                count++;
            }
        }

        return count;
    }
};
