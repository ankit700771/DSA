Note - this problem is just a variation of Longest incressing subsequence

uning top down - dp

 // using topdown
    // int solve(vector<vector<int>>&pairs , int curr , int i , vector<vector<int>>&dp){
    //     if(i >= pairs.size()){
    //         return 0;
    //     }

    //     if(dp[i][curr + 1] != -1){
    //         return dp[i][curr + 1];
    //     }

    //     // take
    //     int take = 0;
    //     if(curr == -1 || pairs[curr][1] < pairs[i][0]){
    //         take = 1 + solve(pairs , i , i+1 ,dp);
    //     }
    //     int skip = solve(pairs , curr , i+1 ,dp);

    //     return dp[i][curr + 1] = max(take ,skip);
    // }


    // using bottom up
    int solveUsingBottomUp(vector<vector<int>>&pairs){
        int n = pairs.size();
        vector<int>dp(n , 1);

        int maxlen = 1;

        for(int i = 0; i<n; i++){
            for(int j = 0; j<i; j++){
                if(pairs[i][0] > pairs[j][1]){
                    dp[i] = max(dp[i] , dp[j] + 1);

                    maxlen = max(dp[i] , maxlen);
                }
            }
        }
        return maxlen;
    }

    int findLongestChain(vector<vector<int>>& pairs) {
        sort(pairs.begin() , pairs.end());
        // int n = pairs.size();
        // vector<vector<int>>dp(n+2 , vector<int>(n+2 , -1));
        return solveUsingBottomUp(pairs);
    }
};
