class Solution {
public:
    int n;

    int findNext(vector<vector<int>>&arr , int start , int target) {
        int end = n - 1;
        int result = n + 1;
        while(start <= end) {
            int mid = start + (end - start) / 2;

            if(arr[mid][0] >= target) {
                result = mid;
                end = mid - 1;
            }else {
                start = mid + 1;
            }

        }

        return result;
    }

    int solve(vector<vector<int>>&arr , int i , vector<int>&dp) {
        if(i >= n) {
            return 0;
        }

        if(dp[i] != -1) {
            return dp[i];
        }

        int next = findNext(arr , i+1 , arr[i][1]);

        int take = arr[i][2] + solve(arr , next , dp);
        int skip = solve(arr , i + 1 , dp);

        return dp[i] = max(take , skip);
    }

    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        n = startTime.size();

        vector<vector<int>>arr(n , vector<int>(3  , 0));
        vector<int>dp(n+1 , -1);

        /*
            contain [start , end , profit]
        */

        for(int i = 0; i<n; i++) {
            arr[i][0] = startTime[i];
            arr[i][1] = endTime[i];
            arr[i][2] = profit[i];
        }

        sort(arr.begin() , arr.end());

        return solve(arr , 0 , dp);
    }
};
