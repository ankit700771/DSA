#include<bits/stdc++.h>
using namespace std;

class Node{
  public: 
    int data;
    Node *left;
    Node *right;

    Node(int data){
      this->data = data;
      this->left = NULL;
      this->right = NULL;
    }
};

Node* buildTree(){
  int data;
  cin >> data;

  if(data == -1){
    return NULL;
  }

  Node *root = new Node(data);
  root->left = buildTree();
  root->right = buildTree();

  return root;
}

void preOrder(Node *root){
  if(root == NULL){
    return;
  }

  cout<<root->data<<" ";
  preOrder(root->left);
  preOrder(root->right);
}

void inOrder(Node *root){
  if(root == NULL){
    return;
  }

  inOrder(root->left);
  cout<<root->data<<" ";
  inOrder(root->right);
}

void postOrder(Node *root){
  if(root == NULL){
    return;
  }

  postOrder(root->left);
  postOrder(root->right);
  cout<<root->data<<" ";
}


void levelOrderTraversal(Node *root){
  queue<Node*>q;
  q.push(root);
  q.push(NULL);

  while(!q.empty()){
    Node *temp = q.front();
    q.pop();

    if(temp == NULL){
      if(!q.empty()){
        q.push(NULL);
      }
      cout<<endl;
    }
    else{
      cout<<temp->data<<" ";
      if(temp->left) q.push(temp->left);
      if(temp->right) q.push(temp->right);
    }
  }
}



int main(){
  Node *root = NULL;

  root = buildTree();

  cout<<"Printing Preorder traversal : "<<endl;
  preOrder(root);
  cout<<endl<<"Printing Inorder Traversal : "<<endl;
  inOrder(root);
  cout<<endl<<"Printing PostOrder Traversal : "<<endl;
  postOrder(root);

  cout<<endl<<"Printing Level Order Traversal : "<<endl;
  levelOrderTraversal(root);

}
